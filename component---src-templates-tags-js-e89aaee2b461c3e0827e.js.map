{"version":3,"sources":["webpack:///./src/components/Navigation.js","webpack:///./src/templates/tags.js","webpack:///./src/components/PostList.js"],"names":["Navigation","location","query","render","navItems","site","isHomepage","pathname","withPrefix","siteMetadata","className","to","src","logo","alt","title","role","edges","map","index","node","isCurrent","slug","key","url","label","social","facebook","target","rel","href","twitter","siteUrl","rss","TagTemplate","pageContext","data","tag","allMarkdownRemark","totalCount","bodyAttributes","class","description","posts","postsPerPage","pageQuery","PostList","props","handleScroll","ticking","requestAnimationFrame","update","document","documentElement","offsetHeight","window","scrollY","innerHeight","setState","postsToShow","state","maxPages","removeEventListener","length","componentDidMount","addEventListener","this","componentWillUnmount","id","slice","post","React","Component"],"mappings":"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","file":"component---src-templates-tags-js-e89aaee2b461c3e0827e.js","sourcesContent":["import React from 'react';\nimport { Link, withPrefix, StaticQuery, graphql } from 'gatsby';\nimport Icons from './Icons';\n\nimport logo from '../assets/logo.png';\n\nconst Navigation = ({ location }) => (\n  <StaticQuery\n    query={graphql`\n      {\n        navItems: allNavigationYaml {\n          edges {\n            node {\n              label\n              url\n            }\n          }\n        }\n        site {\n          siteMetadata {\n            title\n            siteUrl\n            social {\n              facebook\n              twitter\n            }\n          }\n        }\n      }\n    `}\n    render={({ navItems, site }) => {\n      const isHomepage = location.pathname === withPrefix('/'),\n        siteMetadata = site.siteMetadata;\n      return (\n        <nav className='site-nav'>\n          <div className='site-nav-left'>\n            {!isHomepage && (\n              <Link className='site-nav-logo' to={'/'}>\n                <img src={logo} alt={siteMetadata.title} />\n              </Link>\n            )}\n            <ul className='nav' role='menu'>\n              {navItems.edges.map(({ node }, index) => {\n                const isCurrent = withPrefix(node.slug) === location.pathname;\n                return (\n                  <li\n                    className={isCurrent ? 'nav-current' : ''}\n                    key={index}\n                    role='menuitem'\n                  >\n                    <Link to={node.url}>{node.label}</Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n          <div className='site-nav-right'>\n            <div className='social-links'>\n              {siteMetadata.social.facebook && (\n                <a\n                  className='social-link social-link-fb'\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  href={`https://facebook.com/${siteMetadata.social.facebook}`}\n                >\n                  <Icons.facebook />\n                </a>\n              )}\n              {siteMetadata.social.twitter && (\n                <a\n                  className='social-link social-link-tw'\n                  target='_blank'\n                  rel='noopener noreferrer'\n                  href={`https://twitter.com/${siteMetadata.social.twitter}`}\n                >\n                  <Icons.twitter />\n                </a>\n              )}\n            </div>\n            {/* <a className='subscribe-button' href='#subscribe'>Subscribe</a> */}\n            <a\n              className='rss-button'\n              target='_blank'\n              rel='noopener noreferrer'\n              href={`https://feedly.com/i/subscription/feed/${siteMetadata.siteUrl}/rss.xml`}\n            >\n              <Icons.rss />\n            </a>\n          </div>\n        </nav>\n      );\n    }}\n  />\n);\n\nexport default Navigation;\n","import React from 'react';\nimport { graphql } from 'gatsby';\nimport { Helmet } from 'react-helmet';\n\nimport Layout from '../components/Layout';\nimport PostList from '../components/PostList';\nimport Navigation from '../components/Navigation';\n\nconst TagTemplate = ({ pageContext, data, location }) => {\n  const { tag } = pageContext;\n  const { edges, totalCount } = data.allMarkdownRemark;\n  const { title } = data.site.siteMetadata;\n\n  return (\n    <Layout location={location}>\n      <Helmet\n        title={`Posts tagged under ${tag} - ${title}`}\n        bodyAttributes={{\n          class: 'tag-template',\n        }}\n      />\n      <header className='site-header outer'>\n        {/* {{#if feature_image}} */}\n        {/* // style='background-image: url({{feature_image}}){{else}}no-cover{{/if}}'> */}\n        <div className='inner'>\n          <Navigation location={location} />\n          <div className='site-header-content'>\n            <h1 className='site-title'>{tag}</h1>\n            <h2 className='site-description'>\n              {tag.description ||\n                `A collection of ${totalCount} post${\n                  totalCount > 1 ? 's' : ''\n                }`}\n            </h2>\n          </div>\n        </div>\n      </header>\n      <PostList posts={edges} postsPerPage={10} />\n    </Layout>\n  );\n};\n\nexport default TagTemplate;\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        siteUrl\n      }\n    }\n\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] }, draft: { ne: true } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          ...PostCardFragment\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PostCard from './PostCard';\n\nconst SCROLL_BUFFER = 100;\n\nexport default class PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      postsToShow: props.postsPerPage,\n    };\n\n    this.maxPages = props.posts.length;\n    this.ticking = false;\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n    if (!this.ticking) {\n      // console.log('Inside scroll handler')\n      this.ticking = true;\n      requestAnimationFrame(() => this.update());\n    }\n  };\n\n  update = () => {\n    const distaneToBottom =\n      document.documentElement.offsetHeight -\n      (window.scrollY + window.innerHeight);\n    if (distaneToBottom < SCROLL_BUFFER) {\n      // console.log('BU', this.state);\n      this.setState(\n        {\n          postsToShow: this.state.postsToShow + this.props.postsPerPage,\n        },\n        () => {\n          if (this.state.postsToShow >= this.maxPages)\n            window.removeEventListener('scroll', this.handleScroll);\n        }\n      );\n    }\n    this.ticking = false;\n  };\n\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <main id='site-main' className='site-main outer'>\n        <div className='inner'>\n          <div className='post-feed'>\n            {posts.slice(0, this.state.postsToShow).map((post, index) => (\n              <PostCard key={index} post={post.node} />\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}