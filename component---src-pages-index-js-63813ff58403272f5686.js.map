{"version":3,"sources":["webpack:///./src/pages/index.js","webpack:///./src/components/PostList.js"],"names":["Header","siteMetadata","location","featuredImage","className","fluid","src","logo","alt","title","description","BlogIndex","render","siteTitle","get","this","postsPerPage","siteDescription","posts","props","htmlAttributes","lang","meta","name","content","bodyAttributes","class","data","site","React","Component","pageQuery","PostList","handleScroll","ticking","requestAnimationFrame","update","document","documentElement","offsetHeight","window","scrollY","innerHeight","setState","postsToShow","state","maxPages","removeEventListener","length","componentDidMount","addEventListener","componentWillUnmount","id","slice","map","post","index","key","node"],"mappings":"oRAYA,IAAMA,EAAS,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,aAAcC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACxC,OACE,4BAAQC,UAAS,sBAAuBD,EAAgB,GAAK,aAC1DA,GACC,kBAAC,IAAD,CAAaC,UAAU,iBAAiBC,MAAOF,EAAcE,QAE/D,yBAAKD,UAAU,SACb,yBAAKA,UAAU,uBACb,wBAAIA,UAAU,cACZ,yBAAKA,UAAU,YAAYE,IAAKC,IAAMC,IAAKP,EAAaQ,SAE1D,wBAAIL,UAAU,oBAAoBH,EAAaS,cAEjD,kBAAC,IAAD,CAAYR,SAAUA,OAMxBS,E,gLACJC,OAAA,WACE,IAAMC,EAAYC,IAAIC,KAAM,sCAC1BC,EAAeF,IACbC,KACA,oDAEFE,EAAkBH,IAAIC,KAAM,4CAC5BG,EAAQJ,IAAIC,KAAM,sCAClBZ,EAAgBW,IACdC,KACA,0DAGEb,EAAWa,KAAKI,MAAMjB,SAE5B,OACE,kBAAC,IAAD,CAAQA,SAAUa,KAAKI,MAAMjB,UAC3B,kBAAC,IAAD,CACEkB,eAAgB,CAAEC,KAAM,MACxBC,KAAM,CAAC,CAAEC,KAAM,cAAeC,QAASP,IACvCR,MAAUI,EAAL,MAAoBI,EACzBQ,eAAgB,CACdC,MAAO,mBAGX,kBAAC1B,EAAD,CACEC,aAAcc,KAAKI,MAAMQ,KAAKC,KAAK3B,aACnCE,cAAeA,EACfD,SAAUA,IAEZ,kBAAC,IAAD,CAAUgB,MAAOA,EAAOF,aAAcA,M,GA/BtBa,IAAMC,WAqCfnB,YAER,IAAMoB,EAAS,c,yGCnEtB,IAEqBC,E,oBACnB,WAAYb,GAAQ,IAAD,SACjB,cAAMA,IAAN,MAiBFc,aAAe,WACR,EAAKC,UAER,EAAKA,SAAU,EACfC,uBAAsB,kBAAM,EAAKC,cAtBlB,EA0BnBA,OAAS,WAELC,SAASC,gBAAgBC,cACxBC,OAAOC,QAAUD,OAAOE,aAhCT,KAmChB,EAAKC,SACH,CACEC,YAAa,EAAKC,MAAMD,YAAc,EAAKzB,MAAMH,eAEnD,WACM,EAAK6B,MAAMD,aAAe,EAAKE,UACjCN,OAAOO,oBAAoB,SAAU,EAAKd,iBAIlD,EAAKC,SAAU,GAxCf,EAAKW,MAAQ,CACXD,YAAazB,EAAMH,cAGrB,EAAK8B,SAAW3B,EAAMD,MAAM8B,OAC5B,EAAKd,SAAU,EAPE,E,kHAUnBe,kBAAA,WACET,OAAOU,iBAAiB,SAAUnC,KAAKkB,e,EAGzCkB,qBAAA,WACEX,OAAOO,oBAAoB,SAAUhC,KAAKkB,e,EA8B5CrB,OAAA,WAAU,IACAM,EAAUH,KAAKI,MAAfD,MAER,OACE,0BAAMkC,GAAG,YAAYhD,UAAU,mBAC7B,yBAAKA,UAAU,SACb,yBAAKA,UAAU,aACZc,EAAMmC,MAAM,EAAGtC,KAAK8B,MAAMD,aAAaU,KAAI,SAACC,EAAMC,GAAP,OAC1C,kBAAC,IAAD,CAAUC,IAAKD,EAAOD,KAAMA,EAAKG,c,GAtDT7B,IAAMC","file":"component---src-pages-index-js-63813ff58403272f5686.js","sourcesContent":["import React from 'react';\nimport { graphql } from 'gatsby';\nimport get from 'lodash/get';\nimport { Helmet } from 'react-helmet';\nimport GatsbyImage from 'gatsby-image';\n\nimport Layout from '../components/Layout';\nimport PostList from '../components/PostList';\nimport Navigation from '../components/Navigation';\n\nimport logo from '../assets/logo.png';\n\nconst Header = ({ siteMetadata, location, featuredImage }) => {\n  return (\n    <header className={`site-header outer ${featuredImage ? '' : 'no-cover'}`}>\n      {featuredImage && (\n        <GatsbyImage className='featured-image' fluid={featuredImage.fluid} />\n      )}\n      <div className='inner'>\n        <div className='site-header-content'>\n          <h1 className='site-title'>\n            <img className='site-logo' src={logo} alt={siteMetadata.title} />\n          </h1>\n          <h2 className='site-description'>{siteMetadata.description}</h2>\n        </div>\n        <Navigation location={location} />\n      </div>\n    </header>\n  );\n};\n\nclass BlogIndex extends React.Component {\n  render() {\n    const siteTitle = get(this, 'props.data.site.siteMetadata.title'),\n      postsPerPage = get(\n        this,\n        'props.data.site.siteMetadata.config.postsPerPage'\n      ),\n      siteDescription = get(this, 'props.data.site.siteMetadata.description'),\n      posts = get(this, 'props.data.allMarkdownRemark.edges'),\n      featuredImage = get(\n        this,\n        'props.data.featuredImage.edges[0].node.childImageSharp'\n      );\n\n    const location = this.props.location;\n\n    return (\n      <Layout location={this.props.location}>\n        <Helmet\n          htmlAttributes={{ lang: 'en' }}\n          meta={[{ name: 'description', content: siteDescription }]}\n          title={`${siteTitle} - ${siteDescription}`}\n          bodyAttributes={{\n            class: 'home-template',\n          }}\n        />\n        <Header\n          siteMetadata={this.props.data.site.siteMetadata}\n          featuredImage={featuredImage}\n          location={location}\n        />\n        <PostList posts={posts} postsPerPage={postsPerPage} />\n      </Layout>\n    );\n  }\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        config {\n          postsPerPage\n        }\n      }\n    }\n\n    featuredImage: allFile(\n      filter: {\n        sourceInstanceName: { eq: \"assets\" }\n        relativePath: { eq: \"featured-image.jpg\" }\n      }\n    ) {\n      edges {\n        node {\n          childImageSharp {\n            fluid(maxWidth: 1600, quality: 100) {\n              ...GatsbyImageSharpFluid\n            }\n          }\n        }\n      }\n    }\n\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n    ) {\n      edges {\n        node {\n          ...PostCardFragment\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport PostCard from './PostCard';\n\nconst SCROLL_BUFFER = 100;\n\nexport default class PostList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      postsToShow: props.postsPerPage,\n    };\n\n    this.maxPages = props.posts.length;\n    this.ticking = false;\n  }\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll);\n  }\n\n  handleScroll = () => {\n    if (!this.ticking) {\n      // console.log('Inside scroll handler')\n      this.ticking = true;\n      requestAnimationFrame(() => this.update());\n    }\n  };\n\n  update = () => {\n    const distaneToBottom =\n      document.documentElement.offsetHeight -\n      (window.scrollY + window.innerHeight);\n    if (distaneToBottom < SCROLL_BUFFER) {\n      // console.log('BU', this.state);\n      this.setState(\n        {\n          postsToShow: this.state.postsToShow + this.props.postsPerPage,\n        },\n        () => {\n          if (this.state.postsToShow >= this.maxPages)\n            window.removeEventListener('scroll', this.handleScroll);\n        }\n      );\n    }\n    this.ticking = false;\n  };\n\n  render() {\n    const { posts } = this.props;\n\n    return (\n      <main id='site-main' className='site-main outer'>\n        <div className='inner'>\n          <div className='post-feed'>\n            {posts.slice(0, this.state.postsToShow).map((post, index) => (\n              <PostCard key={index} post={post.node} />\n            ))}\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\n"],"sourceRoot":""}